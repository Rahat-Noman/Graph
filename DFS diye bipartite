/*
Problem G

Given an unweighted undirected graph, find if the graph is bipartite. In a bipartite is graph, the vertices can be divided into two sets A and B, such that, there will be no edges between two nodes of set A. Also there will be no edges between two nodes of set B.
Input
First line: N ( 0&lt;N&lt;=100), number of nodes.
Second line: M (0&lt;M&lt;=2000), number of edges.
Next M lines, each: U V (0&lt;=U, V&lt;N), defines an edge from U to V.
Output
Yes/No.  See sample for clarification
6
5
1 3
1 2
0 1
3 4
2 4	Yes
3
3
0 1
0 2
1 2	No
*/



#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
vector< int > adj[100005];
const int mxn = 200002;
#define g 1
#define w -1
#define b 0
int vis[mxn];
bool flag =false;
void dfs(int u)
{
    for(int i = 0; i < (int) adj[u].size(); i++)
    {
        int v= adj[u][i];
        if(vis[v]== -1)
        {
            vis[v] = 1 - vis[u];
            dfs(v);
        }
        else if(vis[v]== vis[u])
        {
         flag = true;
        }
    }
    return;
}
int main()
{
    int n , m;
    cin>>n>>m;
    int u , v;
    for(int i  =0; i < m ; i++)
    {
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i = 0; i < mxn ; i++)
        vis[i] = w;
    for(int i = 0; i < n ; i++)
    {
        if(vis[i]==w)
        {
            vis[i] = 0;
            dfs(i);
        }
    }
    if(flag)
    cout<<"No"<<endl;
    else
    cout<<"Yes"<<endl;
    return 0;
}
